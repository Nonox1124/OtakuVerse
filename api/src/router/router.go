package router

import (
    "github.com/gin-gonic/gin"

    "otakuverse-api/pkg/openapi"
    "otakuverse-api/src/utils"
)

const baseURL = "/api/v1"


func (h *OpenAPIHandlers) GetCredentialsConnect(c *gin.Context) {
    HelperGetCredentialsUser(c)
}

func (h *OpenAPIHandlers) PostCredentialsUser(c *gin.Context) {
    HelperPostCredentialsUser(c)
}

func (h *OpenAPIHandlers) DeleteCredentialsUser(c *gin.Context) {
    HelperDeleteCredentialsUser(c)
}

func (h *OpenAPIHandlers) PatchCredentialsUser(c *gin.Context) {
    HelperPatchCredentialsUser(c)
}

func (h *OpenAPIHandlers) GetUserWorks(c *gin.Context, username string) {
    HelperGetUser(c, username)
}

func (h *OpenAPIHandlers) DeleteUserWork(c *gin.Context, username openapi.Username) {
    HelperDeleteUser(c, username)
}

func (h *OpenAPIHandlers) PatchUserWork(c *gin.Context, username openapi.Username) {
    HelperPatchUser(c, username)
}

func (h *OpenAPIHandlers) GetWorks(c *gin.Context, username string) {
    HelperGetWorks(c, username)
}

func (h *OpenAPIHandlers) DeleteWork(c *gin.Context, id int) {
    HelperDeleteWork(c, id)
}

func (h *OpenAPIHandlers) PostWork(c *gin.Context) {
    HelperPostWork(c)
}

func (h *OpenAPIHandlers) PatchWork(c *gin.Context, workID openapi.Id) {
    HelperPatchWork(c, workID)
}

func (h *OpenAPIHandlers) GetAuthors(c *gin.Context) {
    HelperGetAuthors(c)
}

func (h *OpenAPIHandlers) PostAuthor(c *gin.Context) {
    HelperPostAuthor(c)
}

func (h *OpenAPIHandlers) DeleteAuthor(c *gin.Context) {
    HelperDeleteAuthor(c)
}


func (h *OpenAPIHandlers) PostUserWork(c *gin.Context, username openapi.Username) {
    // non implemented func
}

// OpenAPIHandlers Implementaion of the autogenerated ServerInterface
type OpenAPIHandlers struct {
}

// SetupRouter configures Gin Router for API
func SetupRouter() *gin.Engine {
    if utils.GetConfig().Env == "PROD" {
        gin.SetMode(gin.ReleaseMode)
    }
    router := gin.New()
    router.Use(gin.Recovery())

    if err := router.SetTrustedProxies(utils.GetConfig().GinTrustedProxies); err != nil {
        panic(err)
    }
    ginOptions := openapi.GinServerOptions{
        BaseURL: baseURL,
    }
    openAPIHandler := &OpenAPIHandlers{}
    openapi.RegisterHandlersWithOptions(router, openAPIHandler, ginOptions)
    return router
}
